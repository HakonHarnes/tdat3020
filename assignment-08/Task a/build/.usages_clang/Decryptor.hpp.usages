22 serialization::archive 17 0 0 0 0 54 /Users/hakon/programming/security/Assignment 08/Task a 60 /Users/hakon/programming/security/Assignment 08/Task a/build 0 0 463 0 0 0 1 # 1 1 1 2 18446744073709551615 6 pragma 1 2 1 8 18446744073709551615 4 once 1 9 1 13 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 7 iomanip 2 11 2 18 18446744073709551615 1 > 2 18 2 19 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 8 iostream 3 11 3 19 18446744073709551615 1 > 3 19 3 20 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 7 openssl 4 11 4 18 18446744073709551615 1 / 4 18 4 19 18446744073709551615 3 evp 4 19 4 22 18446744073709551615 1 . 4 22 4 23 18446744073709551615 1 h 4 23 4 24 18446744073709551615 1 > 4 24 4 25 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 7 openssl 5 11 5 18 18446744073709551615 1 / 5 18 5 19 18446744073709551615 3 sha 5 19 5 22 18446744073709551615 1 . 5 22 5 23 18446744073709551615 1 h 5 23 5 24 18446744073709551615 1 > 5 24 5 25 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 1 < 6 10 6 11 18446744073709551615 6 string 6 11 6 17 18446744073709551615 1 > 6 17 6 18 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 1 < 7 10 7 11 18446744073709551615 7 sstream 7 11 7 18 18446744073709551615 1 > 7 18 7 19 18446744073709551615 1 # 8 1 8 2 18446744073709551615 7 include 8 2 8 9 18446744073709551615 1 < 8 10 8 11 18446744073709551615 7 fstream 8 11 8 18 18446744073709551615 1 > 8 18 8 19 18446744073709551615 89 /*
 * Class used for decrypting passwords that
 * are encrypted with OpenSSL's PBKDF2
 */ 10 1 13 4 18446744073709551615 5 class 14 1 14 6 18446744073709551615 9 Decryptor 14 7 14 16 0 1 { 14 17 14 18 18446744073709551615 5 const 15 3 15 8 18446744073709551615 3 std 15 9 15 12 1 2 :: 15 12 15 14 18446744073709551615 6 string 15 14 15 20 2 8 alphabet 15 21 15 29 3 1 = 15 30 15 31 18446744073709551615 54 "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" 15 32 15 86 18446744073709551615 1 ; 15 86 15 87 18446744073709551615 3 std 17 3 17 6 1 2 :: 17 6 17 8 18446744073709551615 6 string 17 8 17 14 2 3 key 17 15 17 18 4 1 ; 17 18 17 19 18446744073709551615 3 std 18 3 18 6 1 2 :: 18 6 18 8 18446744073709551615 6 string 18 8 18 14 2 4 salt 18 15 18 19 5 1 ; 18 19 18 20 18446744073709551615 3 int 19 3 19 6 18446744073709551615 10 iterations 19 7 19 17 6 1 ; 19 17 19 18 18446744073709551615 3 int 20 3 20 6 18446744073709551615 6 maxLen 20 7 20 13 7 1 ; 20 13 20 14 18446744073709551615 3 int 21 3 21 6 18446744073709551615 6 keyLen 21 7 21 13 8 1 ; 21 13 21 14 18446744073709551615 6 public 23 1 23 7 18446744073709551615 1 : 23 7 23 8 18446744073709551615 9 Decryptor 24 3 24 12 0 1 ( 24 12 24 13 0 3 std 24 13 24 16 1 2 :: 24 16 24 18 18446744073709551615 6 string 24 18 24 24 2 1 k 24 25 24 26 9 1 , 24 26 24 27 0 3 std 24 28 24 31 1 2 :: 24 31 24 33 18446744073709551615 6 string 24 33 24 39 2 1 s 24 40 24 41 10 1 , 24 41 24 42 0 3 int 24 43 24 46 18446744073709551615 1 i 24 47 24 48 11 1 , 24 48 24 49 0 3 int 24 50 24 53 18446744073709551615 1 m 24 54 24 55 12 1 ) 24 55 24 56 0 1 { 24 57 24 58 18446744073709551615 3 key 25 5 25 8 4 1 = 25 9 25 10 13 1 k 25 11 25 12 9 1 ; 25 12 25 13 18446744073709551615 4 salt 26 5 26 9 5 1 = 26 10 26 11 13 1 s 26 12 26 13 10 1 ; 26 13 26 14 18446744073709551615 10 iterations 27 5 27 15 6 1 = 27 16 27 17 18446744073709551615 1 i 27 18 27 19 11 1 ; 27 19 27 20 18446744073709551615 6 maxLen 28 5 28 11 7 1 = 28 12 28 13 18446744073709551615 1 m 28 14 28 15 12 1 ; 28 15 28 16 18446744073709551615 6 keyLen 29 5 29 11 8 1 = 29 12 29 13 18446744073709551615 1 k 29 14 29 15 9 1 . 29 15 29 16 14 6 length 29 16 29 22 14 1 ( 29 22 29 23 14 1 ) 29 23 29 24 14 1 / 29 25 29 26 18446744073709551615 1 2 29 27 29 28 18446744073709551615 1 ; 29 28 29 29 18446744073709551615 1 } 30 3 30 4 18446744073709551615 59 // Decrypts the password, returns empty string if not found 32 3 32 62 18446744073709551615 3 std 33 3 33 6 1 2 :: 33 6 33 8 15 6 string 33 8 33 14 2 15 decryptPassword 33 15 33 30 15 1 ( 33 30 33 31 15 1 ) 33 31 33 32 15 1 { 33 33 33 34 18446744073709551615 3 for 34 5 34 8 18446744073709551615 1 ( 34 9 34 10 18446744073709551615 3 int 34 10 34 13 18446744073709551615 1 i 34 14 34 15 16 1 = 34 16 34 17 18446744073709551615 1 1 34 18 34 19 18446744073709551615 1 ; 34 19 34 20 18446744073709551615 1 i 34 21 34 22 16 2 <= 34 23 34 25 18446744073709551615 6 maxLen 34 26 34 32 7 1 ; 34 32 34 33 18446744073709551615 1 i 34 34 34 35 16 2 ++ 34 35 34 37 18446744073709551615 1 ) 34 37 34 38 18446744073709551615 1 { 34 39 34 40 18446744073709551615 3 std 35 7 35 10 1 2 :: 35 10 35 12 18446744073709551615 6 string 35 12 35 18 2 8 password 35 19 35 27 17 1 = 35 28 35 29 18446744073709551615 8 calcHash 35 30 35 38 18 1 ( 35 38 35 39 18 1 i 35 39 35 40 16 1 , 35 40 35 41 18 2 "" 35 42 35 44 18446744073709551615 1 ) 35 44 35 45 18 1 ; 35 45 35 46 18446744073709551615 2 if 36 7 36 9 18446744073709551615 1 ( 36 10 36 11 18446744073709551615 8 password 36 11 36 19 17 2 != 36 20 36 22 19 2 "" 36 23 36 25 18446744073709551615 1 ) 36 25 36 26 18446744073709551615 6 return 37 9 37 15 18446744073709551615 8 password 37 16 37 24 17 1 ; 37 24 37 25 18446744073709551615 1 } 38 5 38 6 18446744073709551615 6 return 40 5 40 11 18446744073709551615 2 "" 40 12 40 14 18446744073709551615 1 ; 40 14 40 15 18446744073709551615 1 } 41 3 41 4 18446744073709551615 7 private 43 1 43 8 18446744073709551615 1 : 43 8 43 9 18446744073709551615 74 // Recursive function to calculate hash (equivalent to n nested for loops) 45 3 45 77 18446744073709551615 3 std 46 3 46 6 1 2 :: 46 6 46 8 18 6 string 46 8 46 14 2 8 calcHash 46 15 46 23 18 1 ( 46 23 46 24 18 3 int 46 24 46 27 18446744073709551615 1 n 46 28 46 29 20 1 , 46 29 46 30 18 3 std 46 31 46 34 1 2 :: 46 34 46 36 18446744073709551615 6 string 46 36 46 42 2 8 password 46 43 46 51 21 1 ) 46 51 46 52 18 1 { 46 53 46 54 18446744073709551615 3 for 47 5 47 8 18446744073709551615 1 ( 47 9 47 10 18446744073709551615 4 char 47 10 47 14 18446744073709551615 1 c 47 15 47 16 22 1 : 47 17 47 18 23 8 alphabet 47 19 47 27 3 1 ) 47 27 47 28 18446744073709551615 1 { 47 29 47 30 18446744073709551615 3 std 48 7 48 10 1 2 :: 48 10 48 12 18446744073709551615 6 string 48 12 48 18 2 3 tmp 48 19 48 22 24 1 = 48 23 48 24 18446744073709551615 8 password 48 25 48 33 21 1 + 48 34 48 35 25 1 c 48 36 48 37 22 1 ; 48 37 48 38 18446744073709551615 64 // Outer loops add characters and pass it on to the inner loops  50 7 50 71 18446744073709551615 2 if 51 7 51 9 18446744073709551615 1 ( 51 10 51 11 18446744073709551615 1 n 51 11 51 12 20 1 > 51 13 51 14 18446744073709551615 1 1 51 15 51 16 18446744073709551615 1 ) 51 16 51 17 18446744073709551615 1 { 51 18 51 19 18446744073709551615 3 std 52 9 52 12 1 2 :: 52 12 52 14 18446744073709551615 6 string 52 14 52 20 2 10 decryption 52 21 52 31 26 1 = 52 32 52 33 18446744073709551615 8 calcHash 52 34 52 42 18 1 ( 52 42 52 43 18 1 n 52 43 52 44 20 1 - 52 45 52 46 18446744073709551615 1 1 52 47 52 48 18446744073709551615 1 , 52 48 52 49 18 3 tmp 52 50 52 53 24 1 ) 52 53 52 54 18 1 ; 52 54 52 55 18446744073709551615 2 if 53 9 53 11 18446744073709551615 1 ( 53 12 53 13 18446744073709551615 10 decryption 53 13 53 23 26 2 != 53 24 53 26 19 2 "" 53 27 53 29 18446744073709551615 1 ) 53 29 53 30 18446744073709551615 6 return 54 11 54 17 18446744073709551615 10 decryption 54 18 54 28 26 1 ; 54 28 54 29 18446744073709551615 1 } 55 7 55 8 18446744073709551615 35 // The inner loop does the hashing  57 7 57 42 18446744073709551615 4 else 58 7 58 11 18446744073709551615 1 { 58 12 58 13 18446744073709551615 3 std 59 9 59 12 1 2 :: 59 12 59 14 18446744073709551615 6 string 59 14 59 20 2 4 hash 59 21 59 25 27 1 = 59 26 59 27 18446744073709551615 6 PBKDF2 59 28 59 34 28 1 ( 59 34 59 35 28 3 tmp 59 35 59 38 24 1 , 59 38 59 39 28 4 salt 59 40 59 44 5 1 , 59 44 59 45 28 10 iterations 59 46 59 56 6 1 , 59 56 59 57 28 6 keyLen 59 58 59 64 8 1 ) 59 64 59 65 28 1 ; 59 65 59 66 18446744073709551615 3 std 60 9 60 12 1 2 :: 60 12 60 14 18446744073709551615 4 cout 60 14 60 18 29 2 << 60 19 60 21 30 4 hash 60 22 60 26 27 2 << 60 27 60 29 30 5 " - " 60 30 60 35 18446744073709551615 2 << 60 36 60 38 30 3 tmp 60 39 60 42 24 2 << 60 43 60 45 31 3 std 60 46 60 49 1 2 :: 60 49 60 51 32 4 endl 60 51 60 55 32 1 ; 60 55 60 56 18446744073709551615 36 // Returns password if hashes match  62 9 62 45 18446744073709551615 2 if 63 9 63 11 18446744073709551615 1 ( 63 12 63 13 18446744073709551615 4 hash 63 13 63 17 27 2 == 63 18 63 20 33 3 key 63 21 63 24 4 1 ) 63 24 63 25 18446744073709551615 1 { 63 26 63 27 18446744073709551615 6 return 64 11 64 17 18446744073709551615 3 tmp 64 18 64 21 24 1 ; 64 21 64 22 18446744073709551615 1 } 65 9 65 10 18446744073709551615 1 } 66 7 66 8 18446744073709551615 1 } 67 5 67 6 18446744073709551615 53 // Returns an empty string if password was not found  70 5 70 58 18446744073709551615 6 return 71 5 71 11 18446744073709551615 2 "" 71 12 71 14 18446744073709551615 1 ; 71 14 71 15 18446744073709551615 1 } 72 3 72 4 18446744073709551615 50 // Returns a hex string from bytes in input string 74 3 74 53 18446744073709551615 3 std 75 3 75 6 1 2 :: 75 6 75 8 34 6 string 75 8 75 14 2 3 hex 75 15 75 18 34 1 ( 75 18 75 19 34 5 const 75 19 75 24 18446744073709551615 3 std 75 25 75 28 1 2 :: 75 28 75 30 18446744073709551615 6 string 75 30 75 36 2 1 & 75 37 75 38 18446744073709551615 5 input 75 38 75 43 35 1 ) 75 43 75 44 34 1 { 75 45 75 46 18446744073709551615 3 std 76 5 76 8 1 2 :: 76 8 76 10 18446744073709551615 12 stringstream 76 10 76 22 36 10 hex_stream 76 23 76 33 37 1 ; 76 33 76 34 18446744073709551615 10 hex_stream 77 5 77 15 37 2 << 77 16 77 18 31 3 std 77 19 77 22 1 2 :: 77 22 77 24 38 3 hex 77 24 77 27 38 2 << 77 28 77 30 31 3 std 77 31 77 34 1 2 :: 77 34 77 36 39 8 internal 77 36 77 44 39 2 << 77 45 77 47 30 3 std 77 48 77 51 1 2 :: 77 51 77 53 40 7 setfill 77 53 77 60 40 1 ( 77 60 77 61 40 3 '0' 77 61 77 64 18446744073709551615 1 ) 77 64 77 65 40 1 ; 77 65 77 66 18446744073709551615 3 for 78 5 78 8 18446744073709551615 1 ( 78 9 78 10 18446744073709551615 4 auto 78 10 78 14 18446744073709551615 1 & 78 15 78 16 18446744073709551615 4 byte 78 16 78 20 41 1 : 78 21 78 22 23 5 input 78 23 78 28 35 1 ) 78 28 78 29 18446744073709551615 10 hex_stream 79 7 79 17 37 2 << 79 18 79 20 30 3 std 79 21 79 24 1 2 :: 79 24 79 26 42 4 setw 79 26 79 30 42 1 ( 79 30 79 31 42 1 2 79 31 79 32 18446744073709551615 1 ) 79 32 79 33 42 2 << 79 34 79 36 31 1 ( 79 37 79 38 18446744073709551615 3 int 79 38 79 41 18446744073709551615 1 ) 79 41 79 42 18446744073709551615 1 ( 79 42 79 43 18446744073709551615 8 unsigned 79 43 79 51 18446744073709551615 4 char 79 52 79 56 18446744073709551615 1 ) 79 56 79 57 18446744073709551615 4 byte 79 57 79 61 41 1 ; 79 61 79 62 18446744073709551615 6 return 80 5 80 11 18446744073709551615 10 hex_stream 80 12 80 22 37 1 . 80 22 80 23 43 3 str 80 23 80 26 43 1 ( 80 26 80 27 43 1 ) 80 27 80 28 43 1 ; 80 28 80 29 18446744073709551615 1 } 81 3 81 4 18446744073709551615 64 // Returns the PBKDF2 (Password-Based Key Derivation Function 2) 83 3 83 67 18446744073709551615 3 std 84 3 84 6 1 2 :: 84 6 84 8 28 6 string 84 8 84 14 2 6 PBKDF2 84 15 84 21 28 1 ( 84 21 84 22 28 5 const 84 22 84 27 18446744073709551615 3 std 84 28 84 31 1 2 :: 84 31 84 33 18446744073709551615 6 string 84 33 84 39 2 1 & 84 40 84 41 18446744073709551615 8 password 84 41 84 49 44 1 , 84 49 84 50 28 5 const 84 51 84 56 18446744073709551615 3 std 84 57 84 60 1 2 :: 84 60 84 62 18446744073709551615 6 string 84 62 84 68 2 1 & 84 69 84 70 18446744073709551615 4 salt 84 70 84 74 45 1 , 84 74 84 75 28 3 int 84 76 84 79 18446744073709551615 10 iterations 84 80 84 90 46 1 , 84 90 84 91 28 3 int 84 92 84 95 18446744073709551615 6 keyLen 84 96 84 102 47 1 ) 84 102 84 103 28 1 { 84 104 84 105 18446744073709551615 3 std 85 5 85 8 1 2 :: 85 8 85 10 18446744073709551615 6 string 85 10 85 16 2 3 key 85 17 85 20 48 1 ; 85 20 85 21 18446744073709551615 3 key 86 5 86 8 48 1 . 86 8 86 9 49 6 resize 86 9 86 15 49 1 ( 86 15 86 16 49 6 keyLen 86 16 86 22 47 1 ) 86 22 86 23 49 1 ; 86 23 86 24 18446744073709551615 22 PKCS5_PBKDF2_HMAC_SHA1 88 5 88 27 50 1 ( 88 27 88 28 50 1 ( 88 28 88 29 18446744073709551615 5 const 88 29 88 34 18446744073709551615 4 char 88 35 88 39 18446744073709551615 1 * 88 40 88 41 18446744073709551615 1 ) 88 41 88 42 18446744073709551615 1 & 88 42 88 43 18446744073709551615 8 password 88 43 88 51 44 1 [ 88 51 88 52 51 1 0 88 52 88 53 18446744073709551615 1 ] 88 53 88 54 51 1 , 88 54 88 55 50 8 password 88 56 88 64 44 1 . 88 64 88 65 52 4 size 88 65 88 69 52 1 ( 88 69 88 70 52 1 ) 88 70 88 71 52 1 , 88 71 88 72 50 1 ( 88 73 88 74 18446744073709551615 5 const 88 74 88 79 18446744073709551615 8 unsigned 88 80 88 88 18446744073709551615 4 char 88 89 88 93 18446744073709551615 1 * 88 94 88 95 18446744073709551615 1 ) 88 95 88 96 18446744073709551615 1 & 88 96 88 97 18446744073709551615 4 salt 88 97 88 101 45 1 [ 88 101 88 102 51 1 0 88 102 88 103 18446744073709551615 1 ] 88 103 88 104 51 1 , 88 104 88 105 50 4 salt 88 106 88 110 45 1 . 88 110 88 111 52 4 size 88 111 88 115 52 1 ( 88 115 88 116 52 1 ) 88 116 88 117 52 1 , 88 117 88 118 50 10 iterations 88 119 88 129 46 1 , 88 129 88 130 50 6 keyLen 88 131 88 137 47 1 , 88 137 88 138 50 1 ( 88 139 88 140 18446744073709551615 8 unsigned 88 140 88 148 18446744073709551615 4 char 88 149 88 153 18446744073709551615 1 * 88 154 88 155 18446744073709551615 1 ) 88 155 88 156 18446744073709551615 1 & 88 156 88 157 18446744073709551615 3 key 88 157 88 160 48 1 [ 88 160 88 161 51 1 0 88 161 88 162 18446744073709551615 1 ] 88 162 88 163 51 1 ) 88 163 88 164 50 1 ; 88 164 88 165 18446744073709551615 6 return 90 5 90 11 18446744073709551615 3 hex 90 12 90 15 34 1 ( 90 15 90 16 34 3 key 90 16 90 19 48 1 ) 90 19 90 20 34 1 ; 90 20 90 21 18446744073709551615 1 } 91 3 91 4 18446744073709551615 1 } 92 1 92 2 18446744073709551615 1 ; 92 2 92 3 18446744073709551615 0 0 53 0 0 0 4 0 0 1 2 0 9 Decryptor 22 1 2 0 3 std 20 1 2 0 14 string:__1:std 6 1 2 0 18 alphabet:Decryptor 6 1 2 0 13 key:Decryptor 6 1 2 0 14 salt:Decryptor 6 1 2 0 20 iterations:Decryptor 6 1 2 0 16 maxLen:Decryptor 6 1 2 0 16 keyLen:Decryptor 10 1 2 0 74 24:25:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 10 1 2 0 74 24:40:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 10 1 2 0 74 24:47:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 10 1 2 0 74 24:54:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 21 1 2 0 30 operator=:basic_string:__1:std 21 1 2 0 27 length:basic_string:__1:std 21 1 2 0 25 decryptPassword:Decryptor 9 1 2 0 74 34:14:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 9 1 2 0 74 35:19:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 21 1 2 0 18 calcHash:Decryptor 8 1 2 0 18 operator!=:__1:std 10 1 2 0 74 46:28:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 10 1 2 0 74 46:43:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 9 1 2 0 74 47:15:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 21 1 2 0 29 operator*:__wrap_iter:__1:std 9 1 2 0 74 48:19:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 8 1 2 0 17 operator+:__1:std 9 1 2 0 74 52:21:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 9 1 2 0 74 59:21:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 21 1 2 0 16 PBKDF2:Decryptor 9 1 2 0 12 cout:__1:std 8 1 2 0 16 operator:__1:std 21 1 2 0 30 operator:basic_ostream:__1:std 8 1 2 0 12 endl:__1:std 8 1 2 0 18 operator==:__1:std 21 1 2 0 13 hex:Decryptor 10 1 2 0 74 75:38:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 20 1 2 0 20 stringstream:__1:std 9 1 2 0 74 76:23:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 8 1 2 0 11 hex:__1:std 8 1 2 0 16 internal:__1:std 8 1 2 0 15 setfill:__1:std 9 1 2 0 74 78:16:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 8 1 2 0 12 setw:__1:std 21 1 2 0 30 str:basic_stringstream:__1:std 10 1 2 0 74 84:41:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 10 1 2 0 74 84:70:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 10 1 2 0 74 84:80:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 10 1 2 0 74 84:96:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 9 1 2 0 74 85:17:/Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 21 1 2 0 27 resize:basic_string:__1:std 8 1 2 0 22 PKCS5_PBKDF2_HMAC_SHA1 21 1 2 0 31 operator[]:basic_string:__1:std 21 1 2 0 25 size:basic_string:__1:std 0 0 1 0 0 0 68 /Users/hakon/programming/security/Assignment 08/Task a/Decryptor.hpp 1600420529